
Microsoft Windows [Version 10.0.22621.608]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Ashutosh Raj Gupta>mongosh
Current Mongosh Log ID: 634aec60156610a739247cee
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.6.0
Using MongoDB:          6.0.1
Using Mongosh:          1.6.0

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2022-10-15T00:36:45.844+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

------
   Enable MongoDB's free cloud-based monitoring service, which will then receive and display
   metrics about your deployment (disk utilization, CPU, operation statistics, etc).
   The monitoring data will be available on a MongoDB website with a unique URL accessible to you
   and anyone you share the URL with. MongoDB may use this information to make product
   improvements and to suggest MongoDB products and deployment options to you.

   To enable free monitoring, run the following command: db.enableFreeMonitoring()
   To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
------

test> show dbs
Assignment  144.00 KiB
admin        40.00 KiB
book        204.00 KiB
config       72.00 KiB
local        80.00 KiB

test> use Assignment
switched to db Assignment

Assignment> show collections
student
students

Assignment> db.createCollection('studentdata')
{ ok: 1 }
Assignment> db.studentdata.insertOne({"name":"Ram","marks":50,"age":20})
{
  acknowledged: true,
  insertedId: ObjectId("634aecbb3f64334b14a2f5f8")
}
Assignment> db.studentdata.insertOne({"name":"Raman","marks":70,"age":20})
{
  acknowledged: true,
  insertedId: ObjectId("634aecc83f64334b14a2f5f9")
}
Assignment> db.studentdata.insertOne({"name":"Aman","marks":80,"age":22})
{
  acknowledged: true,
  insertedId: ObjectId("634aecd53f64334b14a2f5fa")
}
Assignment> db.studentdata.insertOne({"name":"praveen","marks":85,"age":23})
{
  acknowledged: true,
  insertedId: ObjectId("634aece63f64334b14a2f5fb")
}
Assignment> db.studentdata.insertOne({"name":"Ashutosh","marks":90,"age":25})
{
  acknowledged: true,
  insertedId: ObjectId("634aecf63f64334b14a2f5fc")
}
Assignment> db.studentdata.find()
[
  {
    _id: ObjectId("634aecbb3f64334b14a2f5f8"),
    name: 'Ram',
    marks: 50,
    age: 20
  },
  {
    _id: ObjectId("634aecc83f64334b14a2f5f9"),
    name: 'Raman',
    marks: 70,
    age: 20
  },
  {
    _id: ObjectId("634aecd53f64334b14a2f5fa"),
    name: 'Aman',
    marks: 80,
    age: 22
  },
  {
    _id: ObjectId("634aece63f64334b14a2f5fb"),
    name: 'praveen',
    marks: 85,
    age: 23
  },
  {
    _id: ObjectId("634aecf63f64334b14a2f5fc"),
    name: 'Ashutosh',
    marks: 90,
    age: 25
  }
]

Assignment> //calculate the sum of marks of all the students


Assignment> var map=function(){emit(this.age,this.marks)}
Assignment> var reduce=function(age,marks){return Array.sum(marks)}
Assignment> db.studentdata.mapReduce(map,reduce,{'out':'result1'})


{ result: 'result1', ok: 1 }

Assignment> db.result1.find()
[
  { _id: 23, value: 85 },
  { _id: 20, value: 120 },
  { _id: 25, value: 90 },
  { _id: 22, value: 80 }
]
Assignment>

